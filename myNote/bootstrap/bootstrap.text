Bootstrap
  官网: http://getbootstrap.com/
  中文: http://www.bootcss.com/
一.响应式布局
  1.响应式网页 responsive web page
    可以根据浏览设备的不同,而自动的更改布局,图片文字效果,不影响用户的浏览体验
    集中创建页面的图片和排版大小,可以智能的根据用户行为以及使用的设备环境(系统平台/屏幕尺寸/屏幕方向等),进行相应的布局--即一个页面可以兼容多个终端,而无需编写多个不同的版本
  2.响应式布局要求
    (1)不能用固定宽度,必须是流式布局(流式网格布局)
    (2)文字和图片大小必须随着容器的大小而改变(可伸缩的图片和文字)
    (3)使用媒体查询,根据不同的媒体,加载不同的样式(使用媒体查询)
  3.测试
    (1)使用真实设备测试
      测试效果真实可靠;但测试任务量较大
    (2)使用第三方模拟测试软件
      无需添置太多真实设备,方便测试;但测试效果有限
    (3)使用Chrome等浏览器自带模拟设备
      简单方便;测试效果有限,必须进一步验证
  4.编写响应式网页
    (1)声明元标签 viewport--手机适配
      <meta name='viewport' content='width=device-width,initial-scale=1.0,[maximum-scale=1.0,user-scalable=0]'>([]表示可选写内容)
      viewport元标签:  
        早期3G手机为了浏览大尺寸的网页,只能强行把网页缩小,导致文字图片等变小.iOS提出了'视口',视口用于盛放网页内容,超出部分,滑动显示,Android也借用了此概念
      width=device-width 表示视口的宽度就是设备的宽度
      initial-scale=1.0 表示视口是否缩放,1.0表示不缩放
      maximum-scale=1.0 表示允许用户缩放的最大倍率
      minimum-scale=1.0 表示允许用户缩放的最小倍率
      user-scalable=0 表示是否允许用户手动缩放,取值:1/0(yes/no)
    (2)所有容器/文本/图片都使用相对尺寸 %/rem
    (3)流式布局+弹性布局
      实现方法:float+flex
    (4)使用CSS3媒体查询技术  --代码重复率高,使用较少
      媒体查询(Media Query):可以自动根据当前设备类型的不同,有选择性地执行部分css样式,而忽略其他部分
      媒体尺寸:
        PC端:width>992px
        PAD:768px<width<991px
        PHONE:width<767px
      ①根据媒体查询结果使用不同的外部css文件
	<link media='screen and (min-width:992px)' rel="stylesheet" href="01-pc.css">
        <link media='screen and (max-width:991px) and (min-width:768px)' rel="stylesheet" href="01-pad.css">
	<link media='screen and (max-width:767px)' rel="stylesheet" href="01-phone.css">
      ②根据媒体查询的结果执行同一个css文件中的不同代码块
        @media screen and (min-width:992px){  
	  选择器{样式}
	}
	@media screen and (max-width:991px) and (min-width:768px){}
	@media screen and (max-width:767px){}
二.Bootstrap 前端开发框架
  Bootstrap是一套用于HTML\CSS\JS开发开源工具集,它提供Sass变量和大量maxin/响应式栅格系统/可扩展的预制组件/基于jQuery的强大插件系统,能够快速开发出原型或构建APP
  1.使用-起步
    (1)设置基本模板
      <meta name='view-port' content='width=device-width,initial-scale=1.0'>
      <link rel='stylesheet' href='bootstrap.css'>    --bootstrap框架的样式文件
      <script src='jquery.js'></script>               --jquery依赖文件
      <script src='popper.js'></script>                -popper依赖文件
      <script src='bootstrap.js'></script>            --bootstrap框架的核心js文件
  2.全局css样式
    (1)css Reset
      body,p,h1~h6,ul,dl...{margin:0;padding:0;}
    (2)css样式
       设置box-sizing:border-box
       布局容器:container/container-fluid
      1.按钮相关:
        基本按钮:
          .btn-danger 危险
	  .btn-warning 警告
	  .btn-success 成功
	  .btn-info 信息
	  .btn-primary 主要按钮
	  .btn-secondary 次要按钮
	  .btn-dark 黑色
	  .btn-light 浅色
	  .btn-link 链接
	不同边框按钮:
          .btn-outline-primary 主要按钮
	  .btn-outline-success 成功
	  .btn-outline-info 信息
	  ...
	不同大小：
          .btn-lg 大按钮
	  .btn-sm 小按钮
	  .btn-block 块级按钮
      2.图片相关:
        .rounded 圆角图片
        .rounded-circle 椭圆图片
        .img-thumbnail 缩略图
        .img-fluid 响应式图片
      3.文本相关:
        .h1~h6
        .text-danger/success/info/dark/light/primary/muted
        .text-uppercase/lowercase/capitalize 大写/小写/首字母大写
        .text-left/center/right/justify/nowrap 对齐方式
        .font-weight-bold 加粗
        .font-weight-light 细体
        .font-weight-normal 普通
        .font-italic 斜体
      4.列表相关:
        .list-unstyled 去除标识效果
        .list-inline 行内列表
        .list-group 列表分组  
        .list-group-item 列表分组项目
        .active 激活状态(与list-group-item一起用)  list-group-item active
        .disabled 禁用状态(与list-group-item一起用)  list-group-item disabled
        .list-group-item-danger/success/warnning/info/primary/dark/light
      5.表格相关:
        .table
        .table-bordered 带边框的表格
        .table-striped 隔行变色
        .table-hover 带鼠标悬停效果的表格
        .table-primary/success/danger/dark... 表格颜色
        .table-responsive 响应式表格,放在table的父元素上
      6.辅助类
        浮动:
          .float-*-left/right 左右浮动
	  .clearfix 清除浮动
        显示
          .visible/invisible 可见/隐藏
        背景
          .bg-success/info/danger/warning/primary/dark...
        边框
          .border/border-0/border-top 边框/取消边框/上边框...
	  .border-success/info/danger/warning/primary/dark... 边框颜色
	  .rounded/rounded-0 圆角/取消圆角
	  .rouded-top/bottom/left/right 上下左右圆角
        居中对齐
          .m-auto
        内外边距
          .m-0/1/2/3/4/5/ml/mr/mt/mb 外边距
	  .p-0/1/2/3/4/5/pl/pr/pt/pb 内边距
        宽度/高度
          .w-25/50/75/100 宽度
	  .h-25/50/75/100 高度
    (3)栅格布局 row col-[sm/md/lg]-(1~12)
      web布局方式:
        1.table
          优点:简单,容易控制
	  缺点:语义错误,渲染效率低
	2.div+css
	  优点:语义正确,渲染效率高
	  缺点:不易控制
        3.Bootstrap的栅格布局
	  优点:易使用,容易控制,语义正确,渲染效率高
	  缺点:不适用于复杂页面
          (1)最外层使用容器
	    .container 定宽容器
	    .container-fluid 变宽的容器
	  (2)容器中添加行
	    .row(一行均分为12等份)    {display: flex;flex-wrap: wrap;}
          (3)行中添加列
	    .col(每个列都需要指定宽度的的占比n/12) 例:col-6
          (4)响应式栅格布局
	    超大屏幕  .col-xl-(1~12)    width>=1200px
	    大屏幕    .col-lg-(1~12)    992px<=width<1200px
	    中等屏幕  .col-md-(1~12)    768px<=width<992px
	    小屏幕    .col-sm-(1~12)    576px<=width<=767px
	    超小屏幕  .col-xs-(1~12)    width<576px
	    注意:col不添加数字时,自动布局同一行的每个列的宽度占比相等;
	    不同屏幕下列的适应性问题
	      列可以在当前列以及更大的屏幕下有效:
	        col-xl-* 只能在xl屏幕下有效
	        col-lg-* 在xl/lg屏幕下有效
	        col-md-* 在xl/lg/md屏幕下有效
	        col-sm-* 在xl/lg/md/sm屏幕下有效
            例:<div class='col-lg-3 col-md-6 col-sm-12'>不同屏幕下的不同占比</div>
          (5)列偏移
	    offset-*1-*2
	    *1 sm/md/lg/xl 表示不同屏幕下的设置
	    *2 1~11 增加偏移列的左外边距(偏移列数)
	    例:offset-md-4 在中等屏幕下把当前列往右偏移4个列
    (4)弹性布局 .d-flex/.d-inline-flex
      .flex-row 设置弹性子元素水平显示
      .flex-row-reverse 设置右对齐显示
      .flex-column 设置子元素垂直方向显示
      .flex-column-reverse 垂直方向翻转子元素
      .justify-content-start/end/center/between/around 设置弹性子元素的主轴排列方式
      .d-sm/md/lg/xl-flex 根据不同屏幕设置flex类
      .flex-*-row 
      .flex-*-column
    (5)表单
      .form-group 堆叠表单(全屏/垂直显示)   --margin-bottom: 1rem;
      .form-inline 内联表单(水平方向)
      .form-control 
      .form-check 
      .form-check-inline 
      .form-check-input 
      .form-check-label        --margin-bottom: 0;
  3.组件
    (1)下拉菜单
      <div class='dropdown'>
        <button data-toggle='dropdown' class='btn btn-info dropdown-toggle'>触发元素</button>   
	<ul class='dropdown-menu'>
	  <li><a href='#' class='dropdown-item active'>下拉菜单项1</a></li>
	  <p class='dropdown-divider'></p>
	  ...
        </ul>
      </div>
      提示:data-toggle='dropdown'会被bootstrap.js选择,添加事件监听
      .dropdown-header 标题
      .dropdown-divider 分割线 
      .dropdown-toggle  倒三角icon
      .disabled 禁用
    (2)按钮组 .btn-group
      .btn-group-lg/sm 按钮大小
      .btn-group-vertical 垂直按钮组
      <div class='btn-group btn-group-lg'>
        <a href='#' class='btn btn-success'>按钮1</a>
        <a href='#' class='btn btn-info'>按钮2</a>
        <a href='#' class='btn btn-danger'>按钮3</a>
	...
      </div>
    (3)信息提示框 .alert
      .alert-success/info/danger...
      .alert-dismissible     {padding-right: 4rem;}
      <div class='alert alert-danger alert-dismissible w-25'>
        <span data-dismiss='alert' class='close'>关闭</span>
	提示信息
      </div>
      data-dismiss bootstrap.js监听事件,关闭信息提示框
    (4)导航&折叠
      ①水平导航  .nav
        <ul class='nav justify-content-around/flex-column'>
	  <li class='nav-item'><a href='' class='nav-link'></a></li>
	</ul>
	.nav         {display:flex;flex-wrap:wrap;}
	.nav-item
	.nav-link    {display:block;}
	.justify-content-* 
	.flex-column 设置垂直导航
	.nav-justified 
      ②选项卡导航 .nav .nav-tabs
        <ul class='nav nav-tabs justify-content-around/flex-column'>
	  <li class='nav-item'>
	    <a href='#one' class='nav-link' data-toggle='tab'></a>
          </li>
	</ul>
	<div class='tab-content'>
	  <div class='tab-pane' id='one'></div>
	</div>
      ③胶囊导航 .nav .nav-pills
        <ul class='nav nav-pills justify-content-around/flex-column'>
	  <li class='nav-item'>
	    <a href='#no1' class='nav-link active' data-toggle='pill'></a>
          </li>
	</ul>
	<div class='tab-content'>
	  <div class='tab-pane active' id=no1'></div>
	</div>
      ④导航栏  .navbar
        <nav class="navbar navbar-expand-sm">
          <ul class="navbar-nav">
            <li class="nav-item"><a href="#" class="nav-link">Bootstrap</a></li>
	    ...
          </ul>
        </nav>
	.navbar-expand-xl/lg/md/sm  响应式导航(小屏幕下垂直显示)
      ⑤折叠  .collapse
        <button class="btn btn-info" data-toggle="collapse" data-target="#demo">按钮</button>
        <div id="demo" class="collapse">折叠内容</div>
	<a href="#content" data-toggle="collapse">按钮的折叠效果</a>
        <div id="content" class="collapse">a标记的折叠效果</div>
      ⑥折叠导航栏   .navbar-toggler .collapse
      例:<nav class="navbar navbar-expand-sm bg-dark navbar-dark">
           <a href="#" class="navbar-brand">Bootstrap中文网</a>
           <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#menu">
             <span class="navbar-toggler-icon"></span>
           </button>
           <div id="menu" class="collapse navbar-collapse">
             <ul class="navbar-nav">
               <li class="nav-item"><a href="#" class="nav-link">Bootstrap3中文文档</a></li>
               ...
              </ul>
          </div>
        </nav>
    (5)卡片  .card
      .card-body
      .card-header
      .card-footer
      <div class='card'>
        <div class='card-header'>头部</div>
        <div class='card-body'>内容</div>
        <div class='card-footer'>底部</div>
      </div>
    (6)手风琴效果
      data-parent属性
      <div id="acco">
        <!--card1-->
          <div class="card">
            <div class="card-header">
              <a href="#one" class="card-link" data-toggle="collapse">选项内容1</a>
            </div>
            <div id="one" class="collapse" data-parent="#acco">
              <div class="card-body">
                <p>内容1：好好学习天天向上</p>
                <p>内容1：好好学习天天向上</p>
                <p>内容1：好好学习天天向上</p>
              </div>
            </div>
          </div>
        <!--card2-->
          <div class="card">
            <div class="card-header">
              <a href="#two" class="card-link" data-toggle="collapse">选项内容2</a>
            </div>
            <div id="two" class="collapse" data-parent="#acco">
              <div class="card-body">
                内容2:学的不仅仅是技术而是梦想
              </div>
            </div>
          </div>
        <!--card3-->
          <div class="card">
            <div class="card-header">
              <a href="#three" class="card-link" data-toggle="collapse">选项内容3</a>
            </div>
            <div id="three" class="collapse" data-parent="#acco">
              <div class="card-body">
                内容3:三人行必有我师！
              </div>
            </div>
          </div>
      </div>
    (7)媒体对象  .media
      <div class="media">
        <img src="a.jpg">
        <div class="media-body">内容</div>
      </div>
    (8)轮播图  .carousel
     .carousel-indicators 为轮播添加指示符
     .carousel-inner 添加要切换的内容
     .carousel-item 指定每个图片的样式
     例:<div class="carousel" data-ride="carousel" id="demo">
          <ul class="carousel-indicators">
            <li data-slide-to="0" data-target="#demo" class="active"></li>
            <li data-slide-to="1" data-target="#demo"></li>
            <li data-slide-to="2" data-target="#demo"></li>
            <li data-slide-to="3" data-target="#demo"></li>
          </ul>
          <div class="carousel-inner">
            <div class="carousel-item active"><img src="img/banner1.png" alt=""></div>
            <div class="carousel-item"><img src="img/banner2.png" alt=""></div>
            <div class="carousel-item"><img src="img/banner3.png" alt=""></div>
            <div class="carousel-item"><img src="img/banner4.png" alt=""></div>
          </div>
       </div>
     箭头效果:<a href="#demo" class="carousel-control-prev" data-slide="pre">
                <span class="carousel-control-prev-icon"></span>
              </a>
              <a href="#demo" class="carousel-control-next" data-slide="next">
                <span class="carousel-control-next-icon"></span>
              </a>
    (9)模态框 .modal
      模态框是覆盖在父窗体上的子窗体,模态框可以在不离开父窗体的情况下有一些互动,提供信息交换等
      例:<button data-toggle="modal" data-target="#main" class="btn btn-warning">触    发模态框</button>
         <div class="modal" id="main">
           <div class="modal-dialog">
             <div class="modal-content">
               <div class="modal-header">
                 <h4>头部</h4>
                 <button data-dismiss="modal" class="close">&times;</button>
               </div>
               <div class="modal-body">
                 <h4>主体</h4>
               </div>
               <div class="modal-footer">
                 <button class="btn btn-secondary" data-dismiss="modal">关闭</button>
               </div>
             </div>
          </div>
        </div>
    (10)徽章  .badge
      <ul>
        <li>收件箱<a href="#" class="badge bg-info badge-pill">101</a></li>
        <li>已发送<a href="#" class="badge bg-warning badge-info">50</a></li>
      </ul>
    (11)巨幕  .jumbotron
     <div class="jumbotron">
       <h2>技术课程</h2>
       <p>好好学习,天天向上</p>
     </div>
    (12)分页  .pagination .page-item  .page-link
     <ul class="pagination">
        <li class="page-item"><a href="#" class="page-link">上一页</a></li>
        <li class="page-item"><a href="#" class="page-link">1</a></li>
        <li class="page-item"><a href="#" class="page-link">2</a></li>
        <li class="page-item"><a href="#" class="page-link">3</a></li>
        <li class="page-item"><a href="#" class="page-link">下一页</a></li>
      </ul>
    (13)面包屑导航  .breadcrumb
      <ul class="breadcrumb">
        <li class="breadcrumb-item"><a href="#">面包屑1</a></li>
        ...
      </ul>
    (14)进度条  .progress
      .progress-bar
      .progress-bar-striped 条纹进度条
      .progress-bar-animated  进度条动画
      例:<div class="progress">
           <div class="progress-bar w-25">普通进度条</div>
	   <div class="progress-bar progress-bar-striped progress-bar-animated w-75 bg-danger">条纹动画进度条</div>
         </div>
  4.js插件
  5.SCSS定制
    (1)动态样式语言
      ①css缺陷:没有变量和合理的复用机制,使用逻辑上相关的属性值必须重复编写,难以维护
      ②动态样式语言为css赋予了动态语言的特性,极大地提高了样式语言的可维护性
      ③常见的动态样式语言:Sass/Scss/Stylus/Less
    (2)scss
      scss是一款强悍css的辅助工具,它在css语法的基础上增加了变量\嵌套\混合\导入\函数等高级功能,使用scss以及scss的样式库有助于更好地管理样式文件,更高效地开发项目
    (3)使用scss  
      在服务器端使用:
        安装nodejs解释器  
	安装scss编译程序  npm install -g node-sass
	检查程序是否安装  node-sass -v
        编译scss文件
	  创建scss文件
	  通过命令行完成编译:
	    webstrom alt+F12 
	    ctrl+alt+y 刷新
	    单文件转换:node-sass scss/input.scss css/output.css
            多文本转换:node-sass scss -o css
	    单文件监听:node-sass -w scss/input.scss css/output.css
	    监听整个目录:node-sass -w scss -o css
	    注:scss\css为文件夹名称,input.scss\output.css为文件名
    (4)scss基础语法
      1.变量
        使用$符号标识变量
	局部变量&全局变量
	声明重复变量时,前面的值会被覆盖
	!default规则:如果变量已经声明赋值,就用前面的值,否则,就用当前的默认值
	如果变量需要镶嵌在字符串之中,就必须写在#{}之中
	  例:$side:left;
	     .rounded{
	       border-#{$side}-radius:5px;
	     }
      2.注释
        //    单行注释(不会被转换到css文件中)
	/**/  多行注释(会被转换到css文件中)
      3.嵌套规则
        例1:#main{
	     nav,footer{
	       h1{color:red;}
	       p{margin:10px;}
	     }
	     div.middle{background:gray;}
	   }
	例2:div{
	      a{
	        color:gray;
                &:hover{color:red;}
	      }
	    }
	    注:&代表嵌套外层的父选择器
	例3:属性嵌套
	  nav{
	    border:{style:solid;width:1px;color:#ccc;}
	 }
      4.导入scss文件  @import
        在scss中,局部文件以_开头,在scss编译时就不会编译以_开头的文件.而只是把这些文件用作导入,引入局部文件可以省略下划线和后缀
	同一个局部文件可以在不同的主文件中引用
	例:引入局部文件_demo.scss:@import "demo";
      5.混合器  --实现大段样式的重复使用
        (1)普通混合器  @mixin
	  语法:@mixin 混合器名称{样式声明}
	  使用:选择器{@include 混合器名称;}
	  例:@mixin my_box_shadow{
               box-shadow: 0 0 5px 1px gray;
               -moz-box-shadow: 0 0 5px 1px gray;
               -webkit-box-shadow: 0 0 5px 1px gray;
               -moz-box-shadow: 0 0 5px 1px gray;
            }
            .info{
              background: gray;
              border: 1px solid $main-color;
              @include my_box_shadow;
            }
	(2)带参混合器  
	  @mixin 混合器名称(参数1,参数2...){
	    属性1:参数1;
	    属性2:参数2;
	    ...
	  }
	  选择器{@include 混合器名称(实参1,实参2...)}
	(2)继承 @extend
	  一个选择器可以继承另一个选择器定义的所有样式
	  .demo{
	    border:1px solid red;
	    border-radius:8px;
	  }
	  .others{
	    @extend .demo;
	  }
      6.运算
        (1)数字运算(+-*/%)
	  例:$width:5%;
	     $max_width:$width*4;
	     $bgc:#888/4;
	     $base-color:$bgc+#cdf;
	  1.如果必要,会在不同单位间转换
	  2.运算表达式与其他连用时,用空格做连接符
	    例:p{margin:5px+18px auto;}
	  3.+ 可用于链接字符串
	    如果用有引号的字符串拼接无引号的字符串,运算的结果有引号;如果用无引号的字符串拼接有引号的字符串,运算结果则没有引号
	    例:p:before{
	       content:"Micosoft"+yahei;  "Micosoftyahei"
	       font-family:A+"rial";       Arial
	       } 
	  4./ 在CSS中通常起到分割数字的用途,同时也赋予了除法的功能
	    除法:
	      ①如果值,或值的一部分,是变量或函数的返回值;  $width/2
	      ②值被括号包裹  (500px/2)
	      ③值是算术运算的一部分 5px+10px/2px
	  5.在有引号的文本字符串中使用#{}插值语句可以添加动态的值
	    例:p:before{
	         content:"I am #{5+15} years old";
	       }
	(2)颜色值的运算
	  分段计算,分别计算r/g/b的值
	    例:p{color:#010203+#040506}  -->p{color:#050709;}
      7.函数
        (1)颜色函数
	  rgba()
          hsl(hue,saturation,lightness) 
	    h:色调(0-360)  0-120:red 120-240:green 240-360:blue
            s:饱和度(0%-100%)
	    l:亮度(0%-100%)
	(2)数值函数
          round()  四舍五入取整
          ceil()   向上取整
	  floor()  向下取整
	  random() 获取随机数
	  max()/min() 取最大/小值
	(3)字符串函数
	  unquote(string) 删除字符串的引号
	  quote(string) 添加字符串的引号
	  To-upper-case(string) 小写-大写
	  To-lower-case(string) 大写-小写
        (4)自定义函数
          @function my_width($n){
            @return $n*2;
          }
          div{width:my_width(5px);}
      8.控制指令
        (1)@if 
	  当 @if的表达式返回值不是false或null时,表达式成立,执行 @if后{}内代码
	  语法1:选择器{
	         @if 条件{}
	       }
	  语法2:选择器{
	          @if 条件{...
		  }@else if 条件{...
		  }...
		  @else{...}
	        }
	  
	  
①②③④⑤⑥